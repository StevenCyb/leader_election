// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: hs.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HSService_Probe_FullMethodName     = "/hs.HSService/Probe"
	HSService_Reply_FullMethodName     = "/hs.HSService/Reply"
	HSService_Terminate_FullMethodName = "/hs.HSService/Terminate"
	HSService_Ping_FullMethodName      = "/hs.HSService/Ping"
)

// HSServiceClient is the client API for HSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The HS service definition.
type HSServiceClient interface {
	// Probe RPC to send a probe message to the HS service.
	Probe(ctx context.Context, in *ProbeMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Reply RPC to send a reply message to the HS service.
	Reply(ctx context.Context, in *ReplyMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Terminate RPC to stop the election process.
	Terminate(ctx context.Context, in *TerminateMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Ping RPC to check if the node is alive.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type hSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHSServiceClient(cc grpc.ClientConnInterface) HSServiceClient {
	return &hSServiceClient{cc}
}

func (c *hSServiceClient) Probe(ctx context.Context, in *ProbeMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HSService_Probe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hSServiceClient) Reply(ctx context.Context, in *ReplyMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HSService_Reply_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hSServiceClient) Terminate(ctx context.Context, in *TerminateMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HSService_Terminate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hSServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HSService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HSServiceServer is the server API for HSService service.
// All implementations must embed UnimplementedHSServiceServer
// for forward compatibility.
//
// The HS service definition.
type HSServiceServer interface {
	// Probe RPC to send a probe message to the HS service.
	Probe(context.Context, *ProbeMessage) (*emptypb.Empty, error)
	// Reply RPC to send a reply message to the HS service.
	Reply(context.Context, *ReplyMessage) (*emptypb.Empty, error)
	// Terminate RPC to stop the election process.
	Terminate(context.Context, *TerminateMessage) (*emptypb.Empty, error)
	// Ping RPC to check if the node is alive.
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedHSServiceServer()
}

// UnimplementedHSServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHSServiceServer struct{}

func (UnimplementedHSServiceServer) Probe(context.Context, *ProbeMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Probe not implemented")
}
func (UnimplementedHSServiceServer) Reply(context.Context, *ReplyMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reply not implemented")
}
func (UnimplementedHSServiceServer) Terminate(context.Context, *TerminateMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Terminate not implemented")
}
func (UnimplementedHSServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedHSServiceServer) mustEmbedUnimplementedHSServiceServer() {}
func (UnimplementedHSServiceServer) testEmbeddedByValue()                   {}

// UnsafeHSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HSServiceServer will
// result in compilation errors.
type UnsafeHSServiceServer interface {
	mustEmbedUnimplementedHSServiceServer()
}

func RegisterHSServiceServer(s grpc.ServiceRegistrar, srv HSServiceServer) {
	// If the following call pancis, it indicates UnimplementedHSServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HSService_ServiceDesc, srv)
}

func _HSService_Probe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSServiceServer).Probe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HSService_Probe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSServiceServer).Probe(ctx, req.(*ProbeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _HSService_Reply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSServiceServer).Reply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HSService_Reply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSServiceServer).Reply(ctx, req.(*ReplyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _HSService_Terminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSServiceServer).Terminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HSService_Terminate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSServiceServer).Terminate(ctx, req.(*TerminateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _HSService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HSServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HSService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HSServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// HSService_ServiceDesc is the grpc.ServiceDesc for HSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hs.HSService",
	HandlerType: (*HSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Probe",
			Handler:    _HSService_Probe_Handler,
		},
		{
			MethodName: "Reply",
			Handler:    _HSService_Reply_Handler,
		},
		{
			MethodName: "Terminate",
			Handler:    _HSService_Terminate_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _HSService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hs.proto",
}
