// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: bully.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BullyService_Elect_FullMethodName              = "/bully.BullyService/Elect"
	BullyService_LeaderAnnouncement_FullMethodName = "/bully.BullyService/LeaderAnnouncement"
)

// BullyServiceClient is the client API for BullyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The bully service definition.
type BullyServiceClient interface {
	// Elect RPC to check if the node is alive.
	Elect(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// LeaderAnnouncement RPC to announce the leader.
	LeaderAnnouncement(ctx context.Context, in *LeaderAnnouncementMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bullyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBullyServiceClient(cc grpc.ClientConnInterface) BullyServiceClient {
	return &bullyServiceClient{cc}
}

func (c *bullyServiceClient) Elect(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BullyService_Elect_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bullyServiceClient) LeaderAnnouncement(ctx context.Context, in *LeaderAnnouncementMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BullyService_LeaderAnnouncement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BullyServiceServer is the server API for BullyService service.
// All implementations must embed UnimplementedBullyServiceServer
// for forward compatibility.
//
// The bully service definition.
type BullyServiceServer interface {
	// Elect RPC to check if the node is alive.
	Elect(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// LeaderAnnouncement RPC to announce the leader.
	LeaderAnnouncement(context.Context, *LeaderAnnouncementMessage) (*emptypb.Empty, error)
	mustEmbedUnimplementedBullyServiceServer()
}

// UnimplementedBullyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBullyServiceServer struct{}

func (UnimplementedBullyServiceServer) Elect(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Elect not implemented")
}
func (UnimplementedBullyServiceServer) LeaderAnnouncement(context.Context, *LeaderAnnouncementMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaderAnnouncement not implemented")
}
func (UnimplementedBullyServiceServer) mustEmbedUnimplementedBullyServiceServer() {}
func (UnimplementedBullyServiceServer) testEmbeddedByValue()                      {}

// UnsafeBullyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BullyServiceServer will
// result in compilation errors.
type UnsafeBullyServiceServer interface {
	mustEmbedUnimplementedBullyServiceServer()
}

func RegisterBullyServiceServer(s grpc.ServiceRegistrar, srv BullyServiceServer) {
	// If the following call pancis, it indicates UnimplementedBullyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BullyService_ServiceDesc, srv)
}

func _BullyService_Elect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BullyServiceServer).Elect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BullyService_Elect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BullyServiceServer).Elect(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BullyService_LeaderAnnouncement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaderAnnouncementMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BullyServiceServer).LeaderAnnouncement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BullyService_LeaderAnnouncement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BullyServiceServer).LeaderAnnouncement(ctx, req.(*LeaderAnnouncementMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// BullyService_ServiceDesc is the grpc.ServiceDesc for BullyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BullyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bully.BullyService",
	HandlerType: (*BullyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Elect",
			Handler:    _BullyService_Elect_Handler,
		},
		{
			MethodName: "LeaderAnnouncement",
			Handler:    _BullyService_LeaderAnnouncement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bully.proto",
}
